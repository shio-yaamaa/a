{"version":3,"sources":["api/sortTasks.ts","api/id.ts","api/initialData.ts","components/TaskListCategorySwitch.tsx","components/TaskListTableRow.tsx","components/TaskList.tsx","components/AddForm.tsx","components/App.tsx","api/summary.ts","index.tsx"],"names":["statusToOrder","sortTasks","tasks","sort","task1","task2","status","idGenerator","id","idIterator","tasksData","todo","next","value","title","done","TaskListCategorySwitch","currentCategory","handleSwitchCategory","className","ToggleButtonGroup","exclusive","onChange","_event","ToggleButton","TaskListTableRow","task","handleTaskStatusChange","TableRow","TableCell","Select","event","target","MenuItem","TaskList","useState","category","setCategory","Table","TableHead","TableBody","map","key","AddForm","handleAddTask","setTitle","Typography","variant","TextField","label","required","Button","color","onClick","length","App","initialTasksData","setTasksData","useCallback","updatedTodoTasks","filter","todoTask","updatedDoneTasks","doneTask","updatedTask","push","summarize","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.6b65ea1f.chunk.js","sourcesContent":["import { Task } from \"./types\";\n\nconst statusToOrder = {\n    'doing': 0,\n    'new': 1,\n    'pending': 2,\n    'done': 3,\n};\n\nexport const sortTasks = (tasks: Task[]) => {\n    return [...tasks].sort((task1, task2) => {\n        return (statusToOrder[task1.status] - statusToOrder[task2.status]);\n    });\n};\n","function* idGenerator(): IterableIterator<number> {\n    let id = 0;\n    while(true) {\n        yield id++;\n    }\n};\n\nexport const idIterator = idGenerator();\n","import { TasksData } from './types';\nimport { sortTasks } from './sortTasks';\nimport { idIterator } from './id';\n\nexport const tasksData: TasksData = {\n    todo: sortTasks([\n        {\n            id: idIterator.next().value,\n            title: '本返す',\n            status: 'new',\n        },\n        {\n            id: idIterator.next().value,\n            title: 'ダンボール片付ける',\n            status: 'new',\n        },\n        {\n            id: idIterator.next().value,\n            title: 'アンケート返事',\n            status: 'new',\n        },\n        {\n            id: idIterator.next().value,\n            title: '家計簿',\n            status: 'doing',\n        },\n    ]),\n    done: sortTasks([\n        {\n            id: idIterator.next().value,\n            title: '終わったタスク1',\n            status: 'done',\n        },\n        {\n            id: idIterator.next().value,\n            title: '終わったタスク2',\n            status: 'done',\n        },\n        {\n            id: idIterator.next().value,\n            title: '終わったタスク3',\n            status: 'done',\n        },\n        {\n            id: idIterator.next().value,\n            title: '終わったタスク4',\n            status: 'done',\n        },\n    ]),\n};","import React from 'react';\nimport { Category } from '../api/types';\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\n\ntype TaskListCategorySwitchProps = {\n  currentCategory: Category,\n  handleSwitchCategory: (category: Category) => void,\n};\n\nexport const TaskListCategorySwitch: React.FC<TaskListCategorySwitchProps> = ({\n  currentCategory,\n  handleSwitchCategory,\n}) => {\n  return (\n    <div className=\"TaskListCategorySwitch\">\n      <ToggleButtonGroup\n        value={currentCategory}\n        exclusive\n        onChange={(_event, value) => {\n          if (value !== null && currentCategory !== value) {\n            handleSwitchCategory(value);\n          }\n        }}>\n        <ToggleButton value=\"todo\">Todo</ToggleButton>\n        <ToggleButton value=\"done\">Done</ToggleButton>\n      </ToggleButtonGroup>\n    </div>\n  );\n};\n","import React from 'react';\nimport { TableCell, TableRow, MenuItem, Select } from '@material-ui/core';\n\nimport { Task, Status } from '../api/types';\n\ntype TaskListTableRowProps = {\n  task: Task,\n  handleTaskStatusChange: (task: Task, status: Status) => void,\n};\n\nexport const TaskListTableRow: React.FC<TaskListTableRowProps> = ({\n  task,\n  handleTaskStatusChange,\n}) => {\n  return (\n    <TableRow className='TaskListTableRow'>\n      <TableCell>{task.title}</TableCell>\n      <TableCell>\n        <Select\n          value={task.status}\n          onChange={(event) => handleTaskStatusChange(task, event.target.value as Status)}>\n          <MenuItem value=\"new\">New</MenuItem>\n          <MenuItem value=\"doing\">Doing</MenuItem>\n          <MenuItem value=\"pending\">Pending</MenuItem>\n          <MenuItem value=\"done\">Done</MenuItem>\n        </Select>\n      </TableCell>\n    </TableRow>\n  );\n};\n","import React, { useState } from 'react';\nimport { Table, TableBody, TableCell, TableHead, TableRow } from '@material-ui/core';\n\nimport { Status, Task, TasksData, Category } from '../api/types';\nimport { TaskListCategorySwitch } from './TaskListCategorySwitch';\nimport { TaskListTableRow } from './TaskListTableRow';\n\ntype TaskListProps = {\n  tasksData: TasksData,\n  handleTaskStatusChange: (task: Task, status: Status) => void,\n};\n\nexport const TaskList: React.FC<TaskListProps> = ({\n  tasksData,\n  handleTaskStatusChange,\n}) => {\n  const [category, setCategory] = useState<Category>('todo');\n  const tasks = tasksData[category];\n\n  return (\n    <div className=\"TaskList\">\n      <TaskListCategorySwitch\n        currentCategory={category}\n        handleSwitchCategory={(category: Category) => setCategory(category)} />\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>Task</TableCell>\n            <TableCell>Status</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {\n            tasks.map((task) => <TaskListTableRow\n              key={task.id}\n              task={task}\n              handleTaskStatusChange={handleTaskStatusChange} />)\n          }\n        </TableBody>\n      </Table>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { Typography, TextField, Button } from '@material-ui/core';\n\nimport { Task } from '../api/types';\nimport { idIterator } from '../api/id';\n\ntype AddFormProps = {\n  handleAddTask: (task: Task) => void,\n};\n\nexport const AddForm: React.FC<AddFormProps> = ({ handleAddTask }) => {\n  const [title, setTitle] = useState<string>('');\n\n  return (\n    <div className=\"AddForm\">\n      <Typography variant=\"h3\">Add Task</Typography>\n      <TextField\n        label=\"Task title\"\n        value={title}\n        required\n        onChange={(event) => setTitle(event.target.value)} />\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={() => {\n          if (title.length > 0) {\n            handleAddTask({ id: idIterator.next().value, title, status: 'new' });\n            setTitle('');\n          }\n        }}>\n        Add\n      </Button>\n    </div>\n  );\n};\n","import React, { useState, useCallback } from 'react';\nimport { Typography } from '@material-ui/core';\n\nimport { Task, Status, TasksData } from '../api/types';\nimport { tasksData as initialTasksData } from '../api/initialData';\nimport { summarize } from '../api/summary';\nimport { sortTasks } from '../api/sortTasks';\nimport { TaskList } from './TaskList';\nimport { AddForm } from './AddForm';\n\nexport const App: React.FC<{}> = () => {\n  const [tasksData, setTasksData] = useState<TasksData>(initialTasksData);\n\n  const handleAddTask = useCallback(\n    (task: Task) => {\n      setTasksData({\n        ...tasksData,\n        todo: sortTasks([...tasksData.todo, task]),\n      });\n    },\n    [tasksData]\n  );\n\n  const handleTaskStatusChange = useCallback(\n    (task: Task, status: Status) => {\n      const updatedTodoTasks = tasksData.todo.filter((todoTask) => todoTask.id !== task.id);\n      const updatedDoneTasks = tasksData.done.filter((doneTask) => doneTask.id !== task.id);\n      const updatedTask = { ...task, status };\n      (status === 'done' ? updatedDoneTasks : updatedTodoTasks).push(updatedTask);\n      setTasksData({\n        todo: sortTasks(updatedTodoTasks),\n        done: sortTasks(updatedDoneTasks),\n      });\n    },\n    [tasksData]\n  );\n\n  return (\n    <div className=\"App\">\n      <header>\n        <Typography variant=\"h2\">{summarize(tasksData)}</Typography>\n      </header>\n      <section>\n        <TaskList tasksData={tasksData} handleTaskStatusChange={handleTaskStatusChange} />\n      </section>\n      <section>\n        <AddForm handleAddTask={handleAddTask} />\n      </section>\n    </div>\n  );\n};\n","import { TasksData } from './types';\n\nexport const summarize = (tasksData: TasksData) => {\n    return `You have ${tasksData.todo.length} tasks to do`;\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CssBaseline } from '@material-ui/core';\n\nimport { App } from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}